/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   saved-menu.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

import {RequestsListMixin} from '@advanced-rest-client/requests-list-mixin/requests-list-mixin.js';

import {SavedListMixin} from '@advanced-rest-client/saved-list-mixin/saved-list-mixin.js';

import {AnypointMenuMixin} from '@anypoint-web-components/anypoint-menu-mixin/anypoint-menu-mixin.js';

declare class SavedMenuWrapper {
  render(): any;
}

declare global {

  interface HTMLElementTagNameMap {
    "saved-menu-wrapper": SavedMenuWrapper;
    "saved-menu": UiElements.SavedMenu;
  }
}

declare namespace UiElements {

  /**
   * A list of saved requests in the ARC main menu.
   *
   * The element uses direct implementation of the PouchDB to make a query to the
   * datastore. It also listens to events fired by the `arc-models/request-model`
   * element to update state of the saved requests.
   *
   * ### Example
   *
   * ```
   * <saved-menu></saved-menu>
   * <request-model></request-model>
   * ```
   *
   * ### Events
   *
   * The element listens for the following events.
   *
   * #### request-object-changed
   *
   * The details object has to contain the following properties:
   * - `request` (`Object`) - Updated request object. Note, if `_id` of the
   * object changed this should be a copy of the object. Otherwise it won't
   * be possible to recognise old object on the list.
   *
   * Note: `requests` list does not contain full request object. Don't use this
   * objects to update request object.
   *
   * #### request-object-deleted
   *
   * The details object has to contain the following properties:
   * - `id` (`String`) - The `_id` property of removed item.
   *
   * ### Sizing the element
   *
   * The element uses `<iron-list>` to render the data in the view. The list is set
   * to be flex vertically. It means that the element has to be sized directly by the
   * hosting application or otherwise it size will be 0px.
   *
   * It can be done using flex layout and making the element to be `flex: 1`.
   *
   * ## Changes in version 2
   *
   * - PouchDB is no longer included into the element. Each platform can have
   * different implementation of the library so this element will not make
   * assumtions about the platform.
   * - The element does not support "opened" attribute. Once inserted into the
   * DOM it queries datastore.
   *
   * ### Styling
   * `<saved-menu>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--saved-menu` | Mixin applied to the element | `{}`
   * `--saved-menu-background-color` | Background color of the menu | `#f7f7f7`
   * `--saved-menu-focused-post-method-color` | Font color of focused item POST method label | `rgb(33, 150, 243)`
   * `--saved-menu-list` | Mixin applied to the list element. | `{}`
   * `--saved-menu-list-item` | Mixin applied to each list item | `{}`
   * `--saved-menu-name-label` | Mixin applied to the name label | `{}`
   * `--arc-menu-empty-info-color` | Color applied to the empty info section | ``
   * `--arc-menu-empty-info-title-color` | Color applied to the title in the empty info section | ``
   */
  class SavedMenu extends
    RequestsListMixin(
    SavedListMixin(
    Object)) {
    readonly _list: any;

    /**
     * Adds draggable property to the request list item element.
     * The `dataTransfer` object has `arc/request-object` mime type with
     * serialized JSON with request model.
     */
    draggableEnabled: boolean|null|undefined;

    /**
     * Database ID of the selected item.
     */
    selectedItem: string|null|undefined;

    /**
     * Enables compatibility with Anypoint platform
     */
    compatibility: boolean|null|undefined;
    _dropTargetTemplate(): any;
    _unavailableTemplate(): any;
    _listTemplate(): any;
    render(): any;
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(): void;
    _addScrollEvent(): void;
    _draggableChanged(value: any): void;
    _addDndEvents(): void;
    _removeDndEvents(): void;

    /**
     * Called every time the element changed it's scroll position. It will call the `makeQuery`
     * function when there's less than 120px left to scroll. (also it must be opened and must not
     * already querying).
     */
    _scrollHandler(): void;

    /**
     * Handler for the `tap` event on the item.
     */
    _openSaved(e: CustomEvent|null): void;

    /**
     * Computes command label depending on a OS.
     * For Mac it will be cmd + `key` and for the rest of the World it
     * will be ctrl + `key`.
     *
     * @param key The key combination as a sufix after the command key
     * @returns Full command to display in command label.
     */
    _computeA11yCommand(key: String|null): String|null;

    /**
     * Handler for the `dragstart` event added to the list item when `draggableEnabled`
     * is set to true.
     * This function sets request data on the `dataTransfer` object with `arc/request-object`
     * mime type. The request data is a serialized JSON with request model.
     */
    _dragStart(e: Event|null): void;

    /**
     * Handler for `dragover` event on this element. If the dagged item is compatible
     * it renders drop message.
     */
    _dragoverHandler(e: DragEvent|null): void;

    /**
     * Handler for `dragleave` event on this element. If the dagged item is compatible
     * it hides drop message.
     */
    _dragleaveHandler(e: DragEvent|null): void;

    /**
     * Handler for `drag` event on this element. If the dagged item is compatible
     * it adds request to saved requests.
     */
    _dropHandler(e: DragEvent|null): void;

    /**
     * Dispatches (by calling `_dispatch() function`) `save-request` event
     * which is handled by request model to create new request.
     * The function do not need to do anything else since request change listeners
     * will insert the request to the list when saved.
     *
     * @param request The request to store.
     */
    _appendRequest(request: object|null): CustomEvent|null;
  }
}

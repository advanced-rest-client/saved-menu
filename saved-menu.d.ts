/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   saved-menu.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-item/paper-item-body.d.ts" />
/// <reference path="../paper-ripple/paper-ripple.d.ts" />
/// <reference path="../paper-progress/paper-progress.d.ts" />
/// <reference path="../iron-list/iron-list.d.ts" />
/// <reference path="../http-method-label/http-method-label.d.ts" />

declare namespace UiElements {

  /**
   * A list of saved items in the ARC main menu.
   *
   * The element uses direct implementation of the PouchDB to make a query to the
   * datastore. It also listens to events fired by the `arc-models/request-model`
   * element to update state of the saved items.
   *
   * ### Example
   *
   * ```
   * <saved-menu></saved-menu>
   * <request-model></request-model>
   * ```
   *
   * ### Events
   *
   * The element listens for the following events.
   *
   * #### request-object-changed
   *
   * The details object has to contain the following properties:
   * - `request` (`Object`) - Updated request object. Note, if `_id` of the
   * object changed this should be a copy of the object. Otherwise it won't
   * be possible to recognise old object on the list.
   * - `oldId` (`String`) - The `_id` property of the item from before the change.
   *
   * Note: `items` list does not contain full request object. Don't use array
   * of this items to update request object.
   *
   * #### request-object-deleted
   *
   * The details object has to contain the following properties:
   * - `id` (`String`) - The `_id` property of removed item.
   *
   * ### Sizing the element
   *
   * The element uses `<iron-list>` to render the data in the view. The list is set
   * to be flex vertically. It means that the element has to be sized directly by the
   * hosting application or otherwise it size will be 0px.
   *
   * It can be done using flex layout and making the element to be `flex: 1`.
   *
   * ## Changes in version 2
   *
   * - PouchDB is no longer included into the element. Each platform can have
   * different implementation of the library so this element will not make
   * assumtions about the platform.
   * - The element does not support "opened" attribute. Once inserted into the
   * DOM it queries datastore.
   *
   * ### Styling
   * `<saved-menu>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--saved-menu` | Mixin applied to the element | `{}`
   * `--saved-menu-background-color` | Background color of the menu | `#f7f7f7`
   * `--saved-menu-focused-post-method-color` | Font color of focused item POST
   * method label | `rgb(33, 150, 243)`
   * `--saved-menu-list` | Mixin applied to the list element. | `{}`
   * `--saved-menu-list-item` | Mixin applied to each list item | `{}`
   * `--saved-menu-name-label` | Mixin applied to the name label | `{}`
   * `--arc-menu-empty-info-color` | Color applied to the empty info section | ``
   * `--arc-menu-empty-info-title-color` | Color applied to the title in the
   * empty info section | ``
   */
  class SavedMenu extends Polymer.Element {

    /**
     *  Returns a handler to the datastore instance
     */
    readonly _db: any;

    /**
     * Saved items restored from the datastore.
     */
    items: any[]|null|undefined;

    /**
     * True when the element is querying the database for the data.
     */
    readonly querying: boolean|null|undefined;

    /**
     * Computed value, true if the `items` property has values.
     */
    readonly hasItems: boolean|null|undefined;

    /**
     * Database query options for pagination.
     * Override this value to change the query options like limit of the results in one call.
     *
     * This is query options passed to the PouchDB `allDocs` function. Note that it will not
     * set `include_docs` option. A conviniet shortcut is to set the the `includeDocs` property
     * and the directive will be added automatically.
     */
    readonly queryOptions: object|null|undefined;

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Resets the state of the variables.
     */
    reset(): void;

    /**
     * Refreshes the data from the datastore.
     * It resets the query options, clears items and makes a query to the datastore.
     */
    refresh(): void;

    /**
     * Handler for the `request-object-changed`
     */
    _requestChanged(e: any): void;

    /**
     * Processes updated request / saved item.
     * If the request object is already on the list it will update the object.
     * Otherwise the object will be added to the list.
     *
     * @param id Database ID of updated object
     * @param doc Database object.
     */
    _processItemChanged(id: String|null, doc: object|null): void;

    /**
     * Hanlder for the `request-object-deleted` event. Removed item from list if found.
     */
    _requestDeleted(e: any): void;

    /**
     * Handler for the `datastore-destroyed` custom event
     */
    _onDatabaseDestroy(e: any): void;

    /**
     * Computes value for the `hasItems` property.
     */
    _computeHasItems(length: any): any;

    /**
     * Called every time the element changed it's scroll position. It will call the `makeQuery`
     * function when there's less than 120px left to scroll. (also it must be opened and must not
     * already querying).
     */
    _scrollHandler(): void;

    /**
     * The function to call when new query for data is needed.
     */
    makeQuery(): void;

    /**
     * Performs the query and processes the result.
     */
    _loadPage(): void;

    /**
     * Processes query results to generate view data model.
     *
     * @returns Processed data items.
     */
    _processQueryResults(docs: any): any[]|null;

    /**
     * Computes value for the `dataUnavailable` property.
     */
    _computeDataUnavailable(hasItems: any, querying: any): any;

    /**
     * Handler for the `tap` event on the item.
     */
    _openSaved(e: any): void;

    /**
     * Computes command label depending on a OS.
     * For Mac it will be cmd + `key` and for the rest of the World it
     * will be ctrl + `key`.
     *
     * @param key The key combination as a sufix after the command key
     * @returns Full command to display in command label.
     */
    _computeA11yCommand(key: String|null): String|null;
  }
}

interface HTMLElementTagNameMap {
  "saved-menu": UiElements.SavedMenu;
}

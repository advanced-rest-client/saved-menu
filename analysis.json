{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A list of saved requests in the ARC main menu.\n\nThe element uses direct implementation of the PouchDB to make a query to the\ndatastore. It also listens to events fired by the `arc-models/request-model`\nelement to update state of the saved requests.\n\n### Example\n\n```\n<saved-menu></saved-menu>\n<request-model></request-model>\n```\n\n### Events\n\nThe element listens for the following events.\n\n#### request-object-changed\n\nThe details object has to contain the following properties:\n- `request` (`Object`) - Updated request object. Note, if `_id` of the\nobject changed this should be a copy of the object. Otherwise it won't\nbe possible to recognise old object on the list.\n\nNote: `requests` list does not contain full request object. Don't use this\nobjects to update request object.\n\n#### request-object-deleted\n\nThe details object has to contain the following properties:\n- `id` (`String`) - The `_id` property of removed item.\n\n### Sizing the element\n\nThe element uses `<iron-list>` to render the data in the view. The list is set\nto be flex vertically. It means that the element has to be sized directly by the\nhosting application or otherwise it size will be 0px.\n\nIt can be done using flex layout and making the element to be `flex: 1`.\n\n## Changes in version 2\n\n- PouchDB is no longer included into the element. Each platform can have\ndifferent implementation of the library so this element will not make\nassumtions about the platform.\n- The element does not support \"opened\" attribute. Once inserted into the\nDOM it queries datastore.\n\n### Styling\n`<saved-menu>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--saved-menu` | Mixin applied to the element | `{}`\n`--saved-menu-background-color` | Background color of the menu | `#f7f7f7`\n`--saved-menu-focused-post-method-color` | Font color of focused item POST method label | `rgb(33, 150, 243)`\n`--saved-menu-list` | Mixin applied to the list element. | `{}`\n`--saved-menu-list-item` | Mixin applied to each list item | `{}`\n`--saved-menu-name-label` | Mixin applied to the name label | `{}`\n`--arc-menu-empty-info-color` | Color applied to the empty info section | ``\n`--arc-menu-empty-info-title-color` | Color applied to the title in the empty info section | ``",
      "summary": "",
      "path": "saved-menu.js",
      "properties": [
        {
          "name": "draggableEnabled",
          "type": "boolean | null | undefined",
          "description": "Adds draggable property to the request list item element.\nThe `dataTransfer` object has `arc/request-object` mime type with\nserialized JSON with request model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 84
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_draggableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 223,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 2
            },
            "end": {
              "line": 229,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_draggableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 2
            },
            "end": {
              "line": 237,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addDndEvents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 2
            },
            "end": {
              "line": 247,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeDndEvents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 2
            },
            "end": {
              "line": 257,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_scrollHandler",
          "description": "Called every time the element changed it's scroll position. It will call the `makeQuery`\nfunction when there's less than 120px left to scroll. (also it must be opened and must not\nalready querying).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 2
            },
            "end": {
              "line": 265,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "notifyResize",
          "description": "Notifies the list that the resize event occurred.\nShould be called whhen content of the list changed but the list wasn't\nvisible at the time.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 2
            },
            "end": {
              "line": 276,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_openSaved",
          "description": "Handler for the `tap` event on the item.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 2
            },
            "end": {
              "line": 284,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeA11yCommand",
          "description": "Computes command label depending on a OS.\nFor Mac it will be cmd + `key` and for the rest of the World it\nwill be ctrl + `key`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 2
            },
            "end": {
              "line": 303,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "The key combination as a sufix after the command key"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Full command to display in command label."
          }
        },
        {
          "name": "_dragStart",
          "description": "Handler for the `dragstart` event added to the list item when `draggableEnabled`\nis set to true.\nThis function sets request data on the `dataTransfer` object with `arc/request-object`\nmime type. The request data is a serialized JSON with request model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 2
            },
            "end": {
              "line": 321,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDraggableValue",
          "description": "Computes value for the `draggable` property of the list item.\nWhen `draggableEnabled` is set it returns true which is one of the\nconditions to enable drag and drop on an element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 329,
              "column": 2
            },
            "end": {
              "line": 331,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "draggableEnabled",
              "type": "Boolean",
              "description": "Current value of `draggableEnabled`"
            }
          ],
          "return": {
            "type": "String",
            "desc": "`true` or `false` (as string) depending on the argument."
          }
        },
        {
          "name": "_dragoverHandler",
          "description": "Handler for `dragover` event on this element. If the dagged item is compatible\nit renders drop message.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "DragEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dragleaveHandler",
          "description": "Handler for `dragleave` event on this element. If the dagged item is compatible\nit hides drop message.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 2
            },
            "end": {
              "line": 368,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "DragEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dropHandler",
          "description": "Handler for `drag` event on this element. If the dagged item is compatible\nit adds request to saved requests.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 374,
              "column": 2
            },
            "end": {
              "line": 392,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "DragEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_appendRequest",
          "description": "Dispatches (by calling `_dispatch() function`) `save-request` event\nwhich is handled by request model to create new request.\nThe function do not need to do anything else since request change listeners\nwill insert the request to the list when saved.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 401,
              "column": 2
            },
            "end": {
              "line": 410,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "The request to store."
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 96,
          "column": 0
        },
        "end": {
          "line": 411,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.SavedMenu",
      "attributes": [
        {
          "name": "draggable-enabled",
          "description": "Adds draggable property to the request list item element.\nThe `dataTransfer` object has `arc/request-object` mime type with\nserialized JSON with request model.",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 84
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "saved-menu",
      "mixins": [
        "RequestsListMixin",
        "SavedListMixin"
      ]
    }
  ]
}
